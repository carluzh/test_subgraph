type Token @entity(immutable: true) {
  id: Bytes!                 # Token address
  symbol: String!             # e.g. "WETH"
  decimals: BigInt!           # e.g. 18
}

type HookPosition @entity(immutable: false) {
  id: ID!                     # Composite ID: poolId-owner-tickLower-tickUpper-salt
  pool: Bytes!                # PoolId (bytes32)
  owner: Bytes!               # address (EOA)
  hook: Bytes!                # address (the hardcoded hook ID)
  currency0: Token!           # Link to Token entity for currency0
  currency1: Token!           # Link to Token entity for currency1
  tickLower: Int!             # int24
  tickUpper: Int!             # int24
  liquidity: BigInt!          # Current liquidity of this position
  salt: Bytes!                # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TrackedPool @entity(immutable: false) {
  id: Bytes!                  # PoolId (bytes32) - This will be the Pool's ID
  currency0: Token!           # Link to Token entity for currency0
  currency1: Token!           # Link to Token entity for currency1
  tvlUSD: BigDecimal!         # Total Value Locked in USD (Mutable field)
  currentFeeRateBps: BigInt!  # Stores the latest fee rate in Basis Points (New field)
  feeUpdates: [FeeUpdate!]! @derivedFrom(field: "pool") # For full history (New field)
}

# --- New Entities for Volume Tracking ---

# Represents a single Swap event
type Swap @entity(immutable: true) {
  id: ID!                     # Transaction hash + log index
  pool: TrackedPool!          # Link to the Pool entity that this swap occurred in
  timestamp: BigInt!          # Timestamp of the block the swap occurred in
  amount0: BigInt!            # Amount of token0 swapped (can be negative)
  amount1: BigInt!            # Amount of token1 swapped (can be negative)
  amountUSD: BigDecimal!      # Volume of the swap in USD (requires price oracle logic)
  feesUSD: BigDecimal!        # Fees generated by this swap in USD (New field)
  sender: Bytes!              # Address that initiated the swap
  recipient: Bytes!           # Address that received the tokens
  # Add other relevant fields from Swap event if needed (e.g., sqrtPriceX96, tick, feeRate)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Aggregates pool data for a single day
type PoolDayData @entity(immutable: false) {
  id: ID!                     # Pool ID + timestamp (floored to start of day)
  date: Int!                  # Unix timestamp for the start of the day
  pool: TrackedPool!          # Link to the Pool entity
  volumeUSD: BigDecimal!      # Total volume in USD for this pool on this day
  feesUSD: BigDecimal!        # Total fees in USD for this pool on this day
  tvlUSD: BigDecimal!         # Total Value Locked in USD for this pool at end of day
  currentFeeRateBps: BigInt!  # Fee rate at the end of the day (New Field)
}

# --- New Entity for Fee Update Tracking ---

type FeeUpdate @entity(immutable: true) {
  id: ID! # tx hash + log index
  pool: TrackedPool! # Link to the pool
  timestamp: BigInt!
  newFeeRateBps: BigInt! # Storing as BigInt, e.g., 3000 for 0.3%
  transactionHash: Bytes!
}
